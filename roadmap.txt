









## 1. Notification System
- Push Notifications : Using Firebase Cloud Messaging (FCM)
  - Setup Firebase project
  - Configure web push
  - Store FCM token for each user
  - Send notifications using firebase-admin
  - Trigger notifications via cron job when contests are about to begin
  - Daily summary of contests
## 2. Background Processing
- Background Script Enhancement :
  - Scheduled alert trigger (local time + cron simulation)
  - Message listener from popup
  - Chrome Alarms API integration for scheduling notifications
## 3. User Preferences
- Save bookmarks
- Platform filters persistence
- Notification types/preferences
- Theme persistence
## 4. Optional Enhancements
- Email Alerts :
  - Setup nodemailer in backend
  - Collect user emails + preferences
  - Cron job for daily summary / upcoming alerts
## 5. Advanced Features
- Enhanced Notifications :
  - Smart scheduling (5, 15, 30 minutes before contests)
  - Interactive notifications with "Open Contest" buttons
- Data Synchronization :
  - Sync extension data with backend
  - Offline capability with chrome.storage
  - Background sync for contest updates
## 6. Final Steps
- Testing all Chrome APIs functionality
- Chrome Web Store preparation
  - Create store listing assets
  - Privacy policy
  - Extension screenshots and descriptions






coding-contest-tracker/
├── client/                    # Chrome Extension
│   ├── public/
│   │   ├── manifest.json     # Extension manifest
│   │   └── icons/            # Extension icons
│   ├── src/
│   │   ├── popup/            # Extension popup UI (React)
│   │   ├── background/       # Background scripts
│   │   ├── content/          # Content scripts (if needed)
│   │   └── components/       # Shared React components
│   └── build/                # Built extension files
├── server/                   # Node.js API Backend
│   ├── routes/
│   ├── models/
│   ├── services/
│   └── cron/
└── README.md




2. Setup Server API First (server/)

📌 What to build:
Task	File	Tool
✅ Setup Express Server	server/index.js 	Express
✅ Contest schema	server/models/Contest.js	 Mongoose
✅ REST API	server/routes/contestRoutes.js	 Express
✅ DB Connection	server/config/db.js	MongoDB  Atlas

📌 What routes to expose:
GET /api/contests → All contests

GET /api/contests?platform=leetcode → Filter

GET /api/contests/live → Ongoing contests

GET /api/contests/upcoming?range=week → Next 7 days

👉 Test with Postman first!



🤖 3. Scraper Setup (server/scrapers/)
Use axios + cheerio to fetch and parse contest info from:

Codeforces

LeetCode

AtCoder

CodeChef

HackerRank

📦 Store new contests into MongoDB via server API

🔁 Automate this:
Use node-cron to scrape every hour or 30 min

💬 4. Chrome Extension Setup (client/public)
Here’s what each file should do:

📁 client/public/popup.html
Shows contests (platform-wise or by time range)

Buttons: Bookmark, Set Reminder, Filter

Connected to popup script (popup.js)

📁 client/public/background.js
Handles:

Push notification listener (Firebase setup)

Scheduled alert trigger (local time + cron simulation)

Message listener from popup if needed

📁 client/public/manifest.json
Manifest v3 config:

json
Copy
Edit
{
  "manifest_version": 3,
  "name": "Contest Notifier",
  "version": "1.0",
  "permissions": ["storage", "notifications", "alarms"],
  "background": {
    "service_worker": "background.js"
  },
  "action": {
    "default_popup": "popup.html"
  },
  "icons": { "128": "icons/icon128.png" }
}




🔔 5. Push Notifications
Use Firebase Cloud Messaging (FCM):

🛠️ Steps:
Setup Firebase project

Configure web push (get firebase-messaging-sw.js)

Store FCM token for each user in DB

Backend sends notification using firebase-admin

📌 Trigger this via cron job:

When a contest is about to begin

Daily summary of contests

📧 6. Email Alerts (Optional, later)
If you want email alerts:

Setup nodemailer in backend

Collect user emails + preferences

Cron job for daily summary / upcoming alerts

🔐 7. User Preferences (Optional Enhancement)
If you want to save:

Bookmarks

Platform filters

Notification types

You’ll need:

A tiny user model

Store settings in chrome.storage.local or your DB

🎯 Suggested Workflow Order:
Step	Task
1️⃣	Setup and test backend API & DB
2️⃣	Build scrapers and automate updates
3️⃣	Connect popup UI → Fetch contests from backend
4️⃣	Setup background script + manifest
5️⃣	Add push notification logic (FCM)
6️⃣	Add filter + sorting in popup UI
7️⃣	Add bookmarks, user preferences
8️⃣	Setup cron jobs for reminders
9️⃣	Package & test the extension locally
🔟	Deploy backend (Render/Vercel) & publish extension (Chrome Web Store)



🚀 Additional Features to Integrate:
1. Email Alert System
Daily/Weekly Digests - Scheduled email summaries
Personalized Reminders - Contest-specific email alerts
Email Templates - HTML email designs
User Preferences - Email frequency settings
Backend Integration - Nodemailer/Mailgun setup


2. Enhanced Push Notifications
Chrome Notifications API - Native OS notifications
Smart Scheduling - 5, 15, 30 minutes before contests
Background Processing - Service worker notifications
Notification Preferences - User-customizable settings
Interactive Notifications - "Open Contest" buttons


3. Backend Enhancements
Email Service - SMTP/API integration
CRON Jobs - Scheduled email sending
User Management - Email subscription handling
Notification Queue - Reliable delivery system



 Complete Chrome Extension Development Workflow
Phase 1: Chrome Extension Setup (Days 1-2)
Step 1: Chrome Extension Manifest Configuration
Create manifest.json (Manifest V3)
Define permissions: notifications, storage, activeTab, host_permissions
Configure popup, background scripts, and content scripts



Step 2: React + TailwindCSS Setup for Extension
Configure React build for Chrome Extension
Set up TailwindCSS for popup styling
Configure webpack/build process for extension structure


Step 3: Extension Architecture Setup
Popup: Main UI (React components)
Background Script: Handle notifications, API calls, storage
Content Scripts: If needed for web page interaction
Phase 2: Chrome Extension Frontend (Days 3-7)


Step 4: Popup UI Development (React + TailwindCSS)
javascript
// Key components to build:
- ContestDashboard (main view)
- ContestCard (individual contest display)
- NotificationSettings (user preferences)
- ThemeToggle (light/dark mode)
- FilterControls (live, upcoming, etc.)




Step 5: Chrome APIs Integration
Chrome Storage API: Store user preferences, theme, notification settings
Chrome Notifications API: Display contest reminders
Chrome Alarms API: Schedule notifications
Chrome Runtime API: Communication between popup and background


Step 6: Background Script Development
javascript
// Background script responsibilities:
- Fetch contest data from your API
- Schedule notifications using chrome.alarms
- Handle notification clicks
- Sync data with server
- Manage user authentication tokens
Phase 3: Backend API Development (Days 8-12)



Step 7: Express API Server
Authentication endpoints
Contest data endpoints
User preferences endpoints
Notification management endpoints


Step 8: External API Integration
Codeforces API: https://codeforces.com/api/contest.list
LeetCode API: Custom scraping or third-party
AtCoder API: https://kenkoooo.com/atcoder/resources/contests.json
CodeChef API: Contest data fetching


Step 9: Database & Scheduling
MongoDB models for users, contests, notifications
Node-cron for periodic API fetching
Email service integration (Nodemailer)
Phase 4: Advanced Features (Days 13-17)


Step 10: Chrome Notification System
javascript
// Chrome extension notifications:
chrome.notifications.create({
  type: 'basic',
  iconUrl: 'icon.png',
  title: 'Contest Starting Soon!',
  message: 'Codeforces Round starts in 15 minutes'
});


Step 11: Email Integration
Daily/weekly digest emails
Personalized contest reminders
Email preferences management


Step 12: Data Synchronization
Sync extension data with backend
Offline capability with chrome.storage
Background sync for contest updates
Phase 5: Testing & Publishing (Days 18-21)


Step 13: Extension Testing
Load unpacked extension for development
Test all Chrome APIs functionality
Cross-browser compatibility (if needed)


Step 14: Chrome Web Store Preparation
Create store listing assets
Privacy policy and permissions justification
Extension screenshots and descriptions